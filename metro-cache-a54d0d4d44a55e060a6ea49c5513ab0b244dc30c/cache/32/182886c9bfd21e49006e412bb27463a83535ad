__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/Users/gopiy/Documents/Wafi/node_modules/react-native-image-slider/ImageSlider.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[2], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    ImageSlider: {
      displayName: "ImageSlider"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/gopiy/Documents/Wafi/node_modules/react-native-image-slider/ImageSlider.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var reactNativePackage = _require(_dependencyMap[3], 'react-native/package.json');

  var splitVersion = reactNativePackage.version.split('.');
  var majorVersion = +splitVersion[0];
  var minorVersion = +splitVersion[1];

  var ImageSlider = _wrapComponent("ImageSlider")(function (_Component) {
    _inherits(ImageSlider, _Component);

    function ImageSlider() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, ImageSlider);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ImageSlider.__proto__ || Object.getPrototypeOf(ImageSlider)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        position: 0,
        width: _reactNative.Dimensions.get('window').width,
        onPositionChangedCalled: false,
        interval: null
      }, _this._ref = null, _this._panResponder = {}, _this._onRef = function (ref) {
        _this._ref = ref;

        if (ref && _this.state.position !== _this._getPosition()) {
          _this._move(_this._getPosition());
        }
      }, _this._popHelperView = function () {
        return !_this.props.loopBothSides && _this._getPosition() === 0 && _react3.default.createElement(_reactNative.View, {
          style: {
            position: 'absolute',
            width: 50,
            height: '100%'
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 70
          }
        });
      }, _this._move = function (index) {
        var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        var isUpdating = index !== _this._getPosition();

        var x = _reactNative.Dimensions.get('window').width * index;
        _this._ref && _this._ref.scrollTo({
          y: 0,
          x: x,
          animated: animated
        });

        _this.setState({
          position: index
        });

        if (isUpdating && _this.props.onPositionChanged && index < _this.props.images.length && index > -1) {
          _this.props.onPositionChanged(index);

          _this.setState({
            onPositionChangedCalled: true
          });
        }

        _this._setInterval();
      }, _this._clearInterval = function () {
        return _this.state.interval && clearInterval(_this.state.interval);
      }, _this._setInterval = function () {
        _this._clearInterval();

        var _this$props = _this.props,
            autoPlayWithInterval = _this$props.autoPlayWithInterval,
            images = _this$props.images,
            loop = _this$props.loop,
            loopBothSides = _this$props.loopBothSides;

        if (autoPlayWithInterval) {
          _this.setState({
            interval: setInterval(function () {
              return _this._move(!(loop || loopBothSides) && _this.state.position === images.length - 1 ? 0 : _this.state.position + 1);
            }, autoPlayWithInterval)
          });
        }
      }, _this._handleScroll = function (event) {
        var _this$state = _this.state,
            position = _this$state.position,
            width = _this$state.width;
        var _this$props2 = _this.props,
            loop = _this$props2.loop,
            loopBothSides = _this$props2.loopBothSides,
            images = _this$props2.images,
            onPositionChanged = _this$props2.onPositionChanged;
        var x = event.nativeEvent.contentOffset.x;

        if ((loop || loopBothSides) && x.toFixed() >= +(width * images.length).toFixed()) {
          return _this._move(0, false);
        } else if (loopBothSides && x.toFixed() <= +(-width).toFixed()) {
          return _this._move(images.length - 1, false);
        }

        var newPosition = 0;

        if (position !== -1 && position !== images.length) {
          newPosition = Math.round(event.nativeEvent.contentOffset.x / width);

          _this.setState({
            position: newPosition
          });
        }

        if (onPositionChanged && !_this.state.onPositionChangedCalled && newPosition < images.length && newPosition > -1) {
          onPositionChanged(newPosition);
        } else {
          _this.setState({
            onPositionChangedCalled: false
          });
        }

        _this._setInterval();
      }, _this._onLayout = function () {
        _this.setState({
          width: _reactNative.Dimensions.get('window').width
        });

        _this._move(_this.state.position, false);
      }, _this._renderImage = function (image, index) {
        var _Dimensions$get = _reactNative.Dimensions.get('window'),
            width = _Dimensions$get.width;

        var _this$props3 = _this.props,
            onPress = _this$props3.onPress,
            customSlide = _this$props3.customSlide;
        var offset = {
          marginLeft: index === -1 ? -width : 0
        };
        var imageStyle = [styles.image, {
          width: width
        }, offset];

        if (customSlide) {
          return customSlide({
            item: image,
            style: imageStyle,
            index: index,
            width: width
          });
        }

        var imageObject = typeof image === 'string' ? {
          uri: image
        } : image;

        var imageComponent = _react3.default.createElement(_reactNative.Image, {
          key: index,
          source: imageObject,
          style: [imageStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 193
          }
        });

        if (onPress) {
          return _react3.default.createElement(
            _reactNative.TouchableOpacity,
            {
              key: index,
              style: [imageStyle, offset],
              onPress: function (_onPress) {
                function onPress() {
                  return _onPress.apply(this, arguments);
                }

                onPress.toString = function () {
                  return _onPress.toString();
                };

                return onPress;
              }(function () {
                return onPress && onPress({
                  image: image,
                  index: index
                });
              }),
              delayPressIn: 200,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 198
              }
            },
            imageComponent
          );
        }

        return imageComponent;
      }, _this._scrollEnabled = function (position) {
        return position !== -1 && position !== _this.props.images.length;
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ImageSlider, [{
      key: "_getPosition",
      value: function _getPosition() {
        if (typeof this.props.position === 'number') {
          return this.props.position;
        }

        return this.state.position;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        var position = this.props.position;

        if (position && prevProps.position !== position) {
          this._move(position);
        }
      }
    }, {
      key: "componentWillMount",
      value: function componentWillMount() {
        this._setInterval();
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._clearInterval();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var _props = this.props,
            onPress = _props.onPress,
            customButtons = _props.customButtons,
            style = _props.style,
            loop = _props.loop,
            images = _props.images,
            loopBothSides = _props.loopBothSides;

        var position = this._getPosition();

        var scrollEnabled = this._scrollEnabled(position);

        return _react3.default.createElement(
          _reactNative.View,
          {
            style: [styles.container, style],
            onLayout: this._onLayout,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 231
            }
          },
          _react3.default.createElement(
            _reactNative.ScrollView,
            {
              onLayout: this._onLayout,
              ref: function ref(_ref2) {
                return _this2._onRef(_ref2);
              },
              onMomentumScrollEnd: this._handleScroll,
              scrollEventThrottle: 16,
              pagingEnabled: true,
              bounces: loopBothSides,
              contentInset: loopBothSides ? {
                left: this.state.width
              } : {},
              horizontal: true,
              scrollEnabled: scrollEnabled,
              showsHorizontalScrollIndicator: false,
              style: [styles.scrollViewContainer, style],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 232
              }
            },
            loopBothSides && this._renderImage(images[images.length - 1], -1),
            images.map(this._renderImage),
            (loop || loopBothSides) && this._renderImage(images[0], images.length)
          ),
          customButtons ? customButtons(position, this._move) : _react3.default.createElement(
            _reactNative.View,
            {
              style: styles.buttons,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 253
              }
            },
            this.props.images.map(function (image, index) {
              return _react3.default.createElement(
                _reactNative.TouchableHighlight,
                {
                  key: index,
                  underlayColor: "#ccc",
                  onPress: function onPress() {
                    return _this2._move(index);
                  },
                  style: [styles.button, position === index && styles.buttonSelected],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 255
                  }
                },
                _react3.default.createElement(_reactNative.View, {
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 264
                  }
                })
              );
            })
          ),
          this._popHelperView()
        );
      }
    }]);

    return ImageSlider;
  }(_react2.Component));

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    scrollViewContainer: {
      flexDirection: 'row',
      backgroundColor: '#222'
    },
    image: {
      width: 200,
      height: '100%'
    },
    buttons: {
      height: 15,
      marginTop: -25,
      marginBottom: 10,
      justifyContent: 'center',
      alignItems: 'center',
      flexDirection: 'row'
    },
    button: {
      margin: 3,
      width: 8,
      height: 8,
      borderRadius: 8 / 2,
      backgroundColor: '#ccc',
      opacity: 0.9
    },
    buttonSelected: {
      opacity: 1,
      backgroundColor: '#fff'
    }
  });

  exports.default = ImageSlider;
});