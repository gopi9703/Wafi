__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/gopiy/Documents/Wafi/node_modules/react-native-slideshow/Slideshow.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[2], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Slideshow: {
      displayName: "Slideshow"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/gopiy/Documents/Wafi/node_modules/react-native-slideshow/Slideshow.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var reactNativePackage = _require(_dependencyMap[3], 'react-native/package.json');

  var splitVersion = reactNativePackage.version.split('.');
  var majorVersion = +splitVersion[0];
  var minorVersion = +splitVersion[1];

  var styles = _reactNative.StyleSheet.create({
    container: {
      flexDirection: 'row',
      backgroundColor: '#222'
    },
    layoutIndicator: {
      height: 15,
      position: 'absolute',
      bottom: 5,
      left: 0,
      right: 0,
      justifyContent: 'center',
      alignItems: 'center',
      flexDirection: 'row',
      backgroundColor: 'transparent'
    },
    indicator: {
      margin: 3,
      opacity: 0.9
    },
    indicatorSelected: {
      opacity: 1
    },
    containerImage: {
      flex: 1,
      width: _reactNative.Dimensions.get('window').width
    },
    overlay: {
      opacity: 0.5,
      backgroundColor: 'black'
    },
    layoutText: {
      position: 'absolute',
      paddingHorizontal: 15,
      bottom: 30,
      left: 0,
      right: 0,
      justifyContent: 'flex-start',
      alignItems: 'flex-start',
      flexDirection: 'column',
      backgroundColor: 'transparent'
    },
    textTitle: {
      fontWeight: 'bold',
      fontSize: 15,
      color: 'white'
    },
    textCaption: {
      fontWeight: '400',
      fontSize: 12,
      color: 'white'
    }
  });

  var Slideshow = _wrapComponent("Slideshow")(function (_Component) {
    _inherits(Slideshow, _Component);

    function Slideshow(props) {
      _classCallCheck(this, Slideshow);

      var _this = _possibleConstructorReturn(this, (Slideshow.__proto__ || Object.getPrototypeOf(Slideshow)).call(this, props));

      _this.state = {
        position: 0,
        height: _reactNative.Dimensions.get('window').width * (4 / 9),
        width: _reactNative.Dimensions.get('window').width,
        scrolling: false
      };
      return _this;
    }

    _createClass(Slideshow, [{
      key: "_onRef",
      value: function _onRef(ref) {
        this._ref = ref;

        if (ref && this.state.position !== this._getPosition()) {
          this._move(this._getPosition());
        }
      }
    }, {
      key: "_move",
      value: function _move(index) {
        var isUpdating = index !== this._getPosition();

        var x = this.state.width * index;

        if (majorVersion === 0 && minorVersion <= 19) {
          this._ref.scrollTo(0, x, true);
        } else {
          this._ref.scrollTo({
            x: this.state.width * index,
            y: 0,
            animated: true
          });
        }

        this.setState({
          position: index
        });

        if (isUpdating && this.props.onPositionChanged) {
          this.props.onPositionChanged(index);
        }
      }
    }, {
      key: "_getPosition",
      value: function _getPosition() {
        if (typeof this.props.position === 'number') {
          return this.props.position;
        }

        return this.state.position;
      }
    }, {
      key: "_next",
      value: function _next() {
        var pos = this.state.position === this.props.dataSource.length - 1 ? 0 : this.state.position + 1;

        this._move(pos);

        this.setState({
          position: pos
        });
      }
    }, {
      key: "_prev",
      value: function _prev() {
        var pos = this.state.position === 0 ? this.props.dataSource.length - 1 : this.state.position - 1;

        this._move(pos);

        this.setState({
          position: pos
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.position !== this.props.position) {
          this._move(this.props.position);
        }
      }
    }, {
      key: "componentWillMount",
      value: function componentWillMount() {
        var _this2 = this;

        var width = this.state.width;

        var release = function release(e, gestureState) {
          var width = _this2.state.width;
          var relativeDistance = gestureState.dx / width;
          var vx = gestureState.vx;
          var change = 0;

          if (relativeDistance < -0.5 || relativeDistance < 0 && vx <= 0.5) {
            change = 1;
          } else if (relativeDistance > 0.5 || relativeDistance > 0 && vx >= 0.5) {
            change = -1;
          }

          var position = _this2._getPosition();

          if (position === 0 && change === -1) {
            change = 0;
          } else if (position + change >= _this2.props.dataSource.length) {
            change = _this2.props.dataSource.length - (position + change);
          }

          _this2._move(position + change);

          return true;
        };

        this._panResponder = _reactNative.PanResponder.create({
          onPanResponderRelease: release
        });
        this._interval = setInterval(function () {
          var newWidth = _reactNative.Dimensions.get('window').width;

          if (newWidth !== _this2.state.width) {
            _this2.setState({
              width: newWidth
            });
          }
        }, 16);
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        clearInterval(this._interval);
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        var width = this.state.width;
        var height = this.props.height || this.state.height;

        var position = this._getPosition();

        return _react3.default.createElement(
          _reactNative.View,
          {
            style: [this.props.containerStyle, {
              height: height
            }],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 177
            }
          },
          _react3.default.createElement(
            _reactNative.ScrollView,
            _extends({
              ref: function ref(_ref) {
                return _this3._onRef(_ref);
              },
              decelerationRate: 0.99,
              horizontal: true,
              showsHorizontalScrollIndicator: false,
              scrollEnabled: this.props.scrollEnabled
            }, this._panResponder.panHandlers, {
              style: [styles.container, {
                height: height
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 182
              }
            }),
            this.props.dataSource.map(function (image, index) {
              var imageObject = typeof image.url === 'string' ? {
                uri: image.url
              } : image.url;

              var textComponent = _react3.default.createElement(
                _reactNative.View,
                {
                  style: styles.layoutText,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 196
                  }
                },
                image.title === undefined ? null : _react3.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.textTitle,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 197
                    }
                  },
                  image.title
                ),
                image.caption === undefined ? null : _react3.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.textCaption,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 198
                    }
                  },
                  image.caption
                )
              );

              var imageComponent = _react3.default.createElement(
                _reactNative.View,
                {
                  key: index,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 202
                  }
                },
                _react3.default.createElement(_reactNative.Image, {
                  source: imageObject,
                  style: {
                    height: height,
                    width: width
                  },
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 203
                  }
                }),
                textComponent
              );

              var imageComponentWithOverlay = _react3.default.createElement(
                _reactNative.View,
                {
                  key: index,
                  style: styles.containerImage,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 210
                  }
                },
                _react3.default.createElement(
                  _reactNative.View,
                  {
                    style: styles.overlay,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 211
                    }
                  },
                  _react3.default.createElement(_reactNative.Image, {
                    source: imageObject,
                    style: {
                      height: height,
                      width: width
                    },
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 212
                    }
                  })
                ),
                textComponent
              );

              if (_this3.props.onPress) {
                return _react3.default.createElement(
                  _reactNative.TouchableOpacity,
                  {
                    key: index,
                    style: {
                      height: height,
                      width: width
                    },
                    onPress: function onPress() {
                      return _this3.props.onPress({
                        image: image,
                        index: index
                      });
                    },
                    delayPressIn: 200,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 221
                    }
                  },
                  _this3.props.overlay ? imageComponentWithOverlay : imageComponent
                );
              } else {
                return _this3.props.overlay ? imageComponentWithOverlay : imageComponent;
              }
            })
          ),
          _react3.default.createElement(
            _reactNative.View,
            {
              style: [styles.layoutIndicator],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 236
              }
            },
            this.props.dataSource.map(function (image, index) {
              return _react3.default.createElement(
                _reactNative.TouchableOpacity,
                {
                  key: index,
                  onPress: function onPress() {
                    return _this3._move(index);
                  },
                  style: [[styles.indicator, setIndicatorSize(_this3.props.indicatorSize), setIndicatorColor(_this3.props.indicatorColor)], position === index && [styles.indicatorSelected, setIndicatorColor(_this3.props.indicatorSelectedColor)]],
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 242
                  }
                },
                _react3.default.createElement(_reactNative.View, {
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 257
                  }
                })
              );
            })
          ),
          _react3.default.createElement(
            _reactNative.View,
            {
              style: [layoutArrow(this.props.height, this.props.arrowSize), {
                left: 10
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 263
              }
            },
            _react3.default.createElement(
              _reactNative.TouchableOpacity,
              {
                onPress: function onPress() {
                  return _this3._prev();
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 268
                }
              },
              this.props.arrowRight == undefined ? _react3.default.createElement(_reactNative.View, {
                style: [iconArrow(this.props.arrowSize), iconArrowLeft(this.props.arrowSize)],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 272
                }
              }) : this.props.arrowLeft
            )
          ),
          _react3.default.createElement(
            _reactNative.View,
            {
              style: [layoutArrow(this.props.height, this.props.arrowSize), {
                right: 10
              }],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 284
              }
            },
            _react3.default.createElement(
              _reactNative.TouchableOpacity,
              {
                onPress: function onPress() {
                  return _this3._next();
                },
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 289
                }
              },
              this.props.arrowRight == undefined ? _react3.default.createElement(_reactNative.View, {
                style: [iconArrow(this.props.arrowSize), iconArrowRight(this.props.arrowSize)],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 293
                }
              }) : this.props.arrowRight
            )
          )
        );
      }
    }]);

    return Slideshow;
  }(_react2.Component));

  exports.default = Slideshow;
  Slideshow.defaultProps = {
    height: 200,
    indicatorSize: 8,
    indicatorColor: '#CCCCCC',
    indicatorSelectedColor: '#FFFFFF',
    scrollEnabled: true,
    arrowSize: 16
  };
  Slideshow.propTypes = {
    dataSource: _react2.PropTypes.arrayOf(_react2.PropTypes.shape({
      title: _react2.PropTypes.string,
      caption: _react2.PropTypes.string,
      url: _react2.PropTypes.oneOfType([_react2.PropTypes.string, _react2.PropTypes.number]).isRequired
    })).isRequired,
    indicatorSize: _react2.PropTypes.number,
    indicatorColor: _react2.PropTypes.string,
    indicatorSelectedColor: _react2.PropTypes.string,
    height: _react2.PropTypes.number,
    position: _react2.PropTypes.number,
    scrollEnabled: _react2.PropTypes.bool,
    containerStyle: _react2.PropTypes.object,
    overlay: _react2.PropTypes.bool,
    arrowSize: _react2.PropTypes.number,
    arrowLeft: _react2.PropTypes.object,
    arrowRight: _react2.PropTypes.object,
    onPress: _react2.PropTypes.func,
    onPositionChanged: _react2.PropTypes.func
  };

  var setIndicatorSize = function setIndicatorSize(size) {
    return {
      width: size,
      height: size,
      borderRadius: size / 2
    };
  };

  var setIndicatorColor = function setIndicatorColor(color) {
    return {
      backgroundColor: color
    };
  };

  var layoutArrow = function layoutArrow(imageHeight, iconHeight) {
    return {
      position: 'absolute',
      backgroundColor: 'transparent',
      justifyContent: 'flex-start',
      alignItems: 'flex-start',
      top: (imageHeight - iconHeight) / 2,
      bottom: (imageHeight - iconHeight) / 2
    };
  };

  var iconArrow = function iconArrow(iconHeight) {
    return {
      width: 0,
      height: 0,
      margin: 5,
      backgroundColor: 'transparent',
      borderStyle: 'solid',
      borderTopColor: 'transparent',
      borderBottomColor: 'transparent',
      borderTopWidth: iconHeight / 2,
      borderBottomWidth: iconHeight / 2
    };
  };

  var iconArrowRight = function iconArrowRight(iconHeight) {
    return {
      borderRightWidth: 0,
      borderLeftWidth: iconHeight * 75 / 100,
      borderRightColor: 'transparent',
      borderLeftColor: 'white'
    };
  };

  var iconArrowLeft = function iconArrowLeft(iconHeight) {
    return {
      borderRightWidth: iconHeight * 75 / 100,
      borderLeftWidth: 0,
      borderRightColor: 'white',
      borderLeftColor: 'transparent'
    };
  };
});