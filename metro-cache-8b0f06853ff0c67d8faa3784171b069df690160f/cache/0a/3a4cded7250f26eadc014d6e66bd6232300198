__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/Users/gopikrishna/Documents/wafi/node_modules/react-native-swipeable-parallax-carousel/index.js";

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _styles = _require(_dependencyMap[3], "./styles");

  var _styles2 = _interopRequireDefault(_styles);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    SwipeableParallaxCarousel: {
      displayName: "SwipeableParallaxCarousel"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/gopikrishna/Documents/wafi/node_modules/react-native-swipeable-parallax-carousel/index.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var SWIPE_THRESHOLD = 0.25;

  var SwipeableParallaxCarousel = _wrapComponent("SwipeableParallaxCarousel")((_temp = _class = function (_Component) {
    _inherits(SwipeableParallaxCarousel, _Component);

    function SwipeableParallaxCarousel(props) {
      _classCallCheck(this, SwipeableParallaxCarousel);

      var _this = _possibleConstructorReturn(this, (SwipeableParallaxCarousel.__proto__ || Object.getPrototypeOf(SwipeableParallaxCarousel)).call(this, props));

      var position = new _reactNative.Animated.ValueXY();

      var panResponder = _reactNative.PanResponder.create({
        onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {
          return true;
        },
        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gesture) {
          return Math.abs(gesture.dx) > 5;
        },
        onPanResponderGrant: function onPanResponderGrant() {
          if (_this.props.parentScrollViewRef) _this.props.parentScrollViewRef.setNativeProps({
            scrollEnabled: false
          });
        },
        onPanResponderMove: function onPanResponderMove(event, gesture) {
          position.setValue({
            x: gesture.dx,
            y: gesture.dy
          });
        },
        onPanResponderRelease: function onPanResponderRelease(event, gesture) {
          if (gesture.dx > SWIPE_THRESHOLD * _this.state.screenWidth) {
            if (_this.state.currentItem === 0) {
              _this._resetPosition();
            } else _this._forceSwipe('right');
          } else if (gesture.dx < -SWIPE_THRESHOLD * _this.state.screenWidth) {
            if (_this.state.currentItem === _this.props.data.length - 1) {
              _this._resetPosition();
            } else _this._forceSwipe('left');
          } else {
            _this._resetPosition();
          }

          if (_this.props.parentScrollViewRef) _this.props.parentScrollViewRef.setNativeProps({
            scrollEnabled: true
          });
        }
      });

      _this.panResponder = panResponder;
      _this.position = position;
      _this.state = {
        currentItem: 0,
        nextItem: 0,
        screenWidth: _reactNative.Dimensions.get('window').width
      };
      return _this;
    }

    _createClass(SwipeableParallaxCarousel, [{
      key: "_forceSwipe",
      value: function _forceSwipe(direction) {
        var _this2 = this;

        var distance = direction === 'right' ? this.state.screenWidth : -this.state.screenWidth;
        var currentitem = this.state.currentItem;
        var newitem = direction === 'right' ? currentitem - 1 : currentitem + 1;
        this.setState({
          nextItem: newitem
        });

        _reactNative.Animated.spring(this.position, {
          toValue: {
            x: distance,
            y: 0
          }
        }).start(function () {
          return _this2._onSwipeComplete(direction, newitem);
        });
      }
    }, {
      key: "_onSwipeComplete",
      value: function _onSwipeComplete(direction, newitem) {
        this.position.setValue({
          x: 0,
          y: 0
        });
        this.setState({
          currentItem: newitem
        });
      }
    }, {
      key: "_resetPosition",
      value: function _resetPosition() {
        _reactNative.Animated.spring(this.position, {
          toValue: {
            x: 0,
            y: 0
          }
        }).start();
      }
    }, {
      key: "_getOverlay",
      value: function _getOverlay(overlayPath, height) {
        if (overlayPath) return _react3.default.createElement(_reactNative.Image, {
          source: overlayPath,
          style: [_styles2.default.overlay, {
            height: height,
            width: this.state.screenWidth
          }],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 102
          }
        });
        return null;
      }
    }, {
      key: "_getTitle",
      value: function _getTitle(item, titleColor) {
        if (item.title) {
          return _react3.default.createElement(
            _reactNative.View,
            {
              style: [_styles2.default.itemTitleContainer, this._getTitleAlign(), this._getTitlePadding()],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 111
              }
            },
            _react3.default.createElement(
              _reactNative.Text,
              {
                style: [_styles2.default.itemTitle, {
                  color: titleColor
                }],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 112
                }
              },
              item.title
            ),
            item.subtitle && _react3.default.createElement(
              _reactNative.Text,
              {
                style: [_styles2.default.itemSubtitle, {
                  color: titleColor
                }],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 114
                }
              },
              item.subtitle
            )
          );
        }

        return null;
      }
    }, {
      key: "_getTitleAlign",
      value: function _getTitleAlign() {
        if (this.props.align === 'center') return {
          alignItems: 'center'
        };
        if (this.props.align === 'right') return {
          alignItems: 'flex-end'
        };
        return {
          alignItems: 'flex-start'
        };
      }
    }, {
      key: "_getTitlePadding",
      value: function _getTitlePadding() {
        if (this.props.navigation) return {
          paddingBottom: 40
        };
        return null;
      }
    }, {
      key: "_getItemStyle",
      value: function _getItemStyle(index) {
        var position = this.position;
        var zIndex = index === this.state.currentItem ? 0 : 1;
        var defaultmargin = (index - this.state.currentItem) * this.state.screenWidth;
        var deltaleft = this.state.screenWidth;
        if (this.props.parallax && index === this.state.currentItem) deltaleft = this.state.screenWidth / 4;
        if (!this.props.parallax && this.state.currentItem === this.props.data.length - 1) deltaleft = this.state.screenWidth / 4;
        var deltaright = this.state.screenWidth;
        if (this.props.parallax && index === this.state.currentItem) deltaright = this.state.screenWidth / 4;
        if (!this.props.parallax && this.state.currentItem === 0) deltaright = this.state.screenWidth / 4;
        var margin = position.x.interpolate({
          inputRange: [-this.state.screenWidth, 0, this.state.screenWidth],
          outputRange: [defaultmargin - deltaleft, defaultmargin, defaultmargin + deltaright]
        });
        return {
          left: margin,
          zIndex: zIndex,
          elevation: zIndex
        };
      }
    }, {
      key: "_renderItems",
      value: function _renderItems() {
        var _this3 = this;

        var _props = this.props,
            data = _props.data,
            height = _props.height,
            overlayPath = _props.overlayPath,
            titleColor = _props.titleColor,
            _onPress = _props.onPress;
        return data.map(function (item, index) {
          return _react3.default.createElement(
            _reactNative.Animated.View,
            _extends({
              key: item.id
            }, _this3.panResponder.panHandlers, {
              style: [_styles2.default.itemContainer, {
                height: height,
                width: _this3.state.screenWidth
              }, _this3._getItemStyle(index)],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 170
              }
            }),
            _react3.default.createElement(
              _reactNative.TouchableOpacity,
              {
                onPress: function onPress() {
                  return _onPress(item.id);
                },
                style: _styles2.default.touchableContainer,
                activeOpacity: 0.98,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 175
                }
              },
              _react3.default.createElement(
                _reactNative.ImageBackground,
                {
                  source: {
                    uri: item.imagePath
                  },
                  style: _styles2.default.itemImage,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 180
                  }
                },
                _this3._getOverlay(overlayPath, height),
                _this3._getTitle(item, titleColor)
              )
            )
          );
        });
      }
    }, {
      key: "_renderNavigation",
      value: function _renderNavigation() {
        var navigation = this.props.navigation;

        if (navigation) {
          return _react3.default.createElement(
            _reactNative.View,
            {
              style: _styles2.default.navigationContainer,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 201
              }
            },
            this._renderNavigationItems()
          );
        }

        return null;
      }
    }, {
      key: "_renderNavigationItems",
      value: function _renderNavigationItems() {
        var _this4 = this;

        var _props2 = this.props,
            data = _props2.data,
            navigationColor = _props2.navigationColor,
            navigationType = _props2.navigationType;
        var typeItem = null;
        if (navigationType === 'bars') typeItem = _styles2.default.navigationItemBars;
        if (navigationType === 'squares') typeItem = _styles2.default.navigationItemSquares;
        return data.map(function (item, index) {
          var currentItem = null;
          if (index === _this4.state.nextItem) currentItem = {
            backgroundColor: navigationColor,
            transform: [{
              scale: 1.25
            }]
          };
          return _react3.default.createElement(_reactNative.Animated.View, {
            key: index,
            style: [_styles2.default.navigationItem, typeItem, currentItem],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 227
            }
          });
        });
      }
    }, {
      key: "_onLayout",
      value: function _onLayout() {
        this.setState({
          screenWidth: _reactNative.Dimensions.get('window').width
        });
      }
    }, {
      key: "render",
      value: function render() {
        return _react3.default.createElement(
          _reactNative.View,
          {
            onLayout: this._onLayout.bind(this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 245
            }
          },
          _react3.default.createElement(
            _reactNative.View,
            {
              style: {
                height: this.props.height,
                width: this.state.screenWidth
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 246
              }
            },
            this._renderItems(),
            this._renderNavigation()
          )
        );
      }
    }]);

    return SwipeableParallaxCarousel;
  }(_react2.Component), _class.defaultProps = {
    height: 200,
    navigationColor: '#ffffff',
    onPress: function onPress() {}
  }, _temp));

  exports.default = SwipeableParallaxCarousel;
});